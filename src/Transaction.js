import React from 'react';
import { Alchemy, Network } from 'alchemy-sdk';
import { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import Identicon from 'react-identicons';

const settings = {
  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,
  network: Network.ETH_MAINNET,
};

const alchemy = new Alchemy(settings);
var transaction = {};
var loading = true;

function Transaction() {
  const { transactionHash } = useParams();
  const [amount, setAmount] = useState();

  async function getTransaction() {
    loading = true;

    //console.log("transactionHash",transactionHash);
    transaction = await alchemy.core.getTransactionReceipt(transactionHash);
    console.log(transaction);

    loading = false;

    const transactionInfo = await alchemy.core.getTransaction(transactionHash);
    console.log(transactionInfo);
    setAmount(transactionInfo.value.toString());
  }

  useEffect(() => {
    getTransaction();
  });
  
  if (loading) {
    return <h1>Loading...</h1>
  }

  if (transaction.from === undefined) {
    return <h1>Invalid transaction id!</h1>
  }

  return (
    <div className="App">
      <h1>Transaction</h1>
      <Identicon string={transaction.hash} size="200" />
      <table id="transactionParts">
        <thead>
          <tr>
            <th>Field</th>
            <th>Value</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>From</td>
            <td><Link to={`/account/${transaction.from}?highlightTransaction=${transactionHash}`}>{transaction.from}</Link></td>
          </tr>
          <tr>
            <td>To</td>
            <td><Link to={`/account/${transaction.to}?highlightTransaction=${transactionHash}`}>{transaction.to}</Link></td>
          </tr>
          <tr>
            <td>Value</td>
            <td>{amount}</td>
          </tr>
          <tr>
            <td>Block</td>
            <td><Link to={`/block/${transaction.blockHash}?highlightTransaction=${transactionHash}`}>{transaction.blockHash}</Link></td>
          </tr>
          <tr>
            <td>Confirmations</td>
            <td>{transaction.confirmations}</td>
          </tr>
          <tr>
            <th colSpan="2">Gas</th>
          </tr>
          <tr>
            <td>GasLimit</td>
            <td>{transaction.gasLimit ? transaction.gasLimit.toString() : "n/a"}</td>
          </tr>
          <tr>
            <td>GasPrice</td>
            <td>{transaction.gasPrice ? transaction.gasPrice.toString() : "n/a"}</td>
          </tr>
          <tr>
            <th colSpan="2">Technical Information</th>
          </tr>
          <tr>
            <td>AccessList</td>
            <td>{transaction.accessList ? transaction.accessList : "--"}</td>
          </tr>
          <tr>
            <td>ChainId</td>
            <td>{transaction.chainId ? transaction.chainId : "--"}</td>
          </tr>
          <tr>
            <td>Creates</td>
            <td>{transaction.creates ? transaction.creates : "--"}</td>
          </tr>
          <tr>
            <td>Data</td>
            <td>{transaction.data ? transaction.data : "--"}</td>
          </tr>
          <tr>
            <td>Nonce</td>
            <td>{transaction.nonce ? transaction.nonce : "--"}</td>
          </tr>
          <tr>
            <td>Type</td>
            <td>{transaction.type}</td>
          </tr>
          <tr>
            <td>R</td>
            <td>{transaction.r ? transaction.r : "--"}</td>
          </tr>
          <tr>
            <td>S</td>
            <td>{transaction.s ? transaction.s : "--"}</td>
          </tr>
          <tr>
            <td>V</td>
            <td>{transaction.v ? transaction.v : "--"}</td>
          </tr>
        </tbody>
      </table>

      <h2>Logs generated by this transaction</h2>
      <table id="log">
        <thead>
          <tr>
            <th>#</th>
            <th>Address</th>
            <th>Topics</th>
            <th>Data</th>
          </tr>
        </thead>
        <tbody>
          {transaction.logs.length === 0 && <tr><td colSpan={4}>None</td></tr>}
          {transaction.logs.map(l => (
            <tr key={l.logIndex}>
              <td>{l.logIndex}</td>
              <td>{l.address}</td>
              <td>
              {l.topics.map(topic => (
                <div key={topic}>{topic}</div>
              ))}
              </td>
              <td>{l.data}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default Transaction;
